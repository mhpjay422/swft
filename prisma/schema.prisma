// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id @default(cuid())
  email    String  @unique
  username String  @unique
  name     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  password Password?
  projects Project[]
  sections Section[]
  tasks    Task[]
}

model Project {
  id    String @id @default(cuid())
  title String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ownerId String

  sections Section[]
  tasks    Task[]
}

model Section {
  id    String @id @default(cuid())
  title String
  order Int

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  owner     User     @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ownerId   String
  projects  Project? @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  projectId String?

  tasks Task[]
}

model Task {
  id          String  @id @default(cuid())
  title       String
  description String?
  completed   Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  owner     User     @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ownerId   String
  projects  Project? @relation(fields: [projectId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  projectId String?
  sections  Section? @relation(fields: [sectionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  sectionId String?
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}
